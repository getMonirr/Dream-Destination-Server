// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// user model
model User {
  id          String        @id @default(uuid())
  name        String
  email       String        @unique
  password    String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  role        UserRole      @default(USER)
  trip        Trip[]
  status      UserStatus  @default(ACTIVE)
  isDeleted   Boolean       @default(false)
  travelBuddy TravelBuddy[]
  userProfile UserProfile?
}

// user profile model 
model UserProfile {
  id        String   @id @default(uuid())
  userId    String   @unique
  bio       String
  age       Int
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

// trip model
model Trip {
  id          String   @id @default(uuid())
  userId      String
  destination String
  startDate   String
  endDate     String
  budget      Int
  activities  String[]
  image       String?
  description String?
  photos      String[]
  type        TravelType  @default(ADVENTURE)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User          @relation(fields: [userId], references: [id])
  travelBuddy TravelBuddy[]
}

// travel buddy model 
model TravelBuddy {
  id        String   @id @default(uuid())
  tripId    String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  status      Status        @default(PENDING)
  trip Trip @relation(fields: [tripId], references: [id])
  user User @relation(fields: [userId], references: [id])
}

// enum for status
enum Status {
  PENDING
  APPROVED
  REJECTED
}

// enum for role
enum UserRole {
  USER
  ADMIN
}

// travel type enum
enum TravelType {
  BACKPACKING
  LUXURY
  ROAD_TRIP
  VOLUNTEER
  EDUCATIONAL
  ADVENTURE
  FOODIE
  SLOW_TRAVEL
  LEISURE
  BUSINESS
  OTHER
}

// user status enum
enum UserStatus {
  ACTIVE
  DEACTIVATE
}
